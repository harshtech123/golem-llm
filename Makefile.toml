[config]
default_to_workspace = false
skip_core_tasks = true

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.clean-all]
script_runner = "@duckscript"
script = '''
exec find . -type d \( -name "target" -o -name "wit-generated" -o -name "golem-temp" \) -exec rm -rf {} +
'''

[tasks.unit-tests]
command = "cargo"
args = ["test"]

[tasks.build]
script_runner = "@duckscript"
script = '''

domains = array llm embed websearch search video exec graph stt vector

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} build
    end
else
    exec --fail-on-error cargo make --cwd ${1} build
end
'''

[tasks.release-build]
script_runner = "@duckscript"
script = '''

domains = array llm embed websearch search video exec graph stt vector

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} release-build
    end
else
    exec --fail-on-error cargo make --cwd ${1} release-build
end
'''

[tasks.build-portable]
script_runner = "@duckscript"
script = '''
#!/bin/bash
domains = array llm embed websearch search video exec graph stt vector

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} build-portable
    end
else
    exec --fail-on-error cargo make --cwd ${1} build-portable
end
'''

[tasks.release-build-portable]
script_runner = "@duckscript"
script = '''
#!/bin/bash
domains = array llm embed websearch search video exec graph stt vector

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} release-build-portable
    end
else
    exec --fail-on-error cargo make --cwd ${1} release-build-portable
end
'''

[tasks.wit]
script_runner = "@duckscript"
script = '''
domains = array llm embed websearch search video exec graph stt vector

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} wit
    end
else
    exec --fail-on-error cargo make --cwd ${1} wit
end
'''

[tasks.build-test-components]
description = "Builds all test components with golem-cli"
script_runner = "@duckscript"
script = '''
domains = array llm embed websearch search video exec graph stt vector

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} build-test-components
    end
else
    exec --fail-on-error cargo make --cwd ${1} build-test-components
end
'''

[tasks.release-build-test-components]
description = "Builds all test components with golem-cli"
script_runner = "@duckscript"
script = '''
domains = array llm websearch search video exec graph stt

# if there is no domain passed run for every domain
if is_empty ${1}
    for domain in ${domains}
        exec --fail-on-error cargo make --cwd ${domain} release-build-test-components
    end
else
    exec --fail-on-error cargo make --cwd ${1} release-build-test-components
end
'''

[tasks.build-all]
script_runner = "@duckscript"
script = '''
mkdir components/debug

cm_run_task clean
cm_run_task build
cm_run_task copy-debug-artifacts

cm_run_task clean
cm_run_task build-portable
set_env "PORTABLE" "yes"
cm_run_task copy-debug-artifacts
'''

[tasks.release-build-all]
script_runner = "@duckscript"
script = '''
mkdir components/release

cm_run_task set-version

cm_run_task clean
cm_run_task release-build
cm_run_task copy-release-artifacts

cm_run_task clean
cm_run_task release-build-portable
set_env "PORTABLE" "yes"
cm_run_task copy-release-artifacts
'''

[tasks.copy-debug-artifacts]
script_runner = "@duckscript"
script = '''

portable = get_env "PORTABLE"
is_portable = eq ${portable} "yes"
environment = get_env "ENVIRONMENT"
is_dev = eq ${environment} "dev"


targets = array llm_openai llm_anthropic llm_grok llm_openrouter llm_ollama web_search_brave web_search_google web_search_serper web_search_tavily search_algolia search_elasticsearch search_meilisearch search_opensearch search_typesense video_kling video_runway video_veo video_stability graph_arangodb graph_janusgraph graph_neo4j stt_aws stt_azure stt_deepgram stt_google stt_whisper vector_milvus vector_pgvector vector_pinecone vector_qdrant

for target in ${targets}
    echo "Copying artifacts for ${target}..."
    if ${is_portable}
        if ${is_dev}
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}-portable-dev.wasm
        else
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}-portable.wasm
        end
    else
        if ${is_dev}
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}-dev.wasm
        else
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}.wasm
        end
    end
end

echo "Copying artifacts for exec..."
if ${is_portable}
    if ${is_dev}
        cp target/debug/golem_exec_portable.wasm components/debug/golem_exec-portable-dev.wasm
        cp target/debug/golem_exec_python_portable.wasm components/debug/golem_exec_python-portable-dev.wasm
        cp target/debug/golem_exec_javascript_portable.wasm components/debug/golem_exec_javascript-portable-dev.wasm
    else
        cp target/debug/golem_exec_portable.wasm components/debug/golem_exec-portable.wasm
        cp target/debug/golem_exec_python_portable.wasm components/debug/golem_exec_python-portable.wasm
        cp target/debug/golem_exec_javascript_portable.wasm components/debug/golem_exec_javascript-portable.wasm
    end
else
    if ${is_dev}
        cp target/debug/golem_exec.wasm components/debug/golem_exec-dev.wasm
        cp target/debug/golem_exec_python.wasm components/debug/golem_exec_python-dev.wasm
        cp target/debug/golem_exec_javascript.wasm components/debug/golem_exec_javascript-dev.wasm
    else
        cp target/debug/golem_exec.wasm components/debug/golem_exec.wasm
        cp target/debug/golem_exec_python.wasm components/debug/golem_exec_python.wasm
        cp target/debug/golem_exec_javascript.wasm components/debug/golem_exec_javascript.wasm
    end
end



embed_targets = array  embed_openai embed_cohere embed_hugging_face embed_voyageai

for target in ${embed_targets}
    if ${is_portable}
        if ${is_dev}
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}-portable-dev.wasm
        else
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}-portable.wasm
        end
    else
        if ${is_dev}
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}-dev.wasm
        else
            cp target/wasm32-wasip1/debug/golem_${target}.wasm components/debug/golem_${target}.wasm
        end
    end
end
'''

[tasks.copy-release-artifacts]
script_runner = "@duckscript"
script = '''

portable = get_env "PORTABLE"
is_portable = eq ${portable} "yes"
environment = get_env "ENVIRONMENT"
is_dev = eq ${environment} "dev"


targets = array llm_openai llm_anthropic llm_grok llm_openrouter llm_ollama  web_search_brave web_search_google web_search_serper web_search_tavily search_algolia search_elasticsearch search_meilisearch search_opensearch search_typesense video_kling video_runway video_veo video_stability graph_arangodb graph_janusgraph graph_neo4j stt_aws stt_azure stt_deepgram stt_google stt_whisper vector_milvus vector_pgvector vector_pinecone vector_qdrant

for target in ${targets}
    echo "Copying artifacts for ${target}..."
    if ${is_portable}
        if ${is_dev}
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}-portable-dev.wasm
        else
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}-portable.wasm
        end
    else
        if ${is_dev}
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}-dev.wasm
        else
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}.wasm
        end
    end
end

echo "Copying artifacts for exec..."
if ${is_portable}
    if ${is_dev}
        cp target/release/golem_exec_portable.wasm components/release/golem_exec-portable-dev.wasm
        cp target/release/golem_exec_python_portable.wasm components/release/golem_exec_python-portable-dev.wasm
        cp target/release/golem_exec_javascript_portable.wasm components/release/golem_exec_javascript-portable-dev.wasm
    else
        cp target/release/golem_exec_portable.wasm components/release/golem_exec-portable.wasm
        cp target/release/golem_exec_python_portable.wasm components/release/golem_exec_python-portable.wasm
        cp target/release/golem_exec_javascript_portable.wasm components/release/golem_exec_javascript-portable.wasm
    end
else
    if ${is_dev}
        cp target/release/golem_exec.wasm components/release/golem_exec-dev.wasm
        cp target/release/golem_exec_python.wasm components/release/golem_exec_python-dev.wasm
        cp target/release/golem_exec_javascript.wasm components/release/golem_exec_javascript-dev.wasm
    else
        cp target/release/golem_exec.wasm components/release/golem_exec.wasm
        cp target/release/golem_exec_python.wasm components/release/golem_exec_python.wasm
        cp target/release/golem_exec_javascript.wasm components/release/golem_exec_javascript.wasm
    end
end


embed_targets = array  embed_openai embed_cohere embed_hugging_face embed_voyageai

for target in ${embed_targets}
    if ${is_portable}
        if ${is_dev}
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}-portable-dev.wasm
        else
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}-portable.wasm
        end
    else
        if ${is_dev}
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}-dev.wasm
        else
            cp target/wasm32-wasip1/release/golem_${target}.wasm components/release/golem_${target}.wasm
        end
    end
end
'''

# Maintenance tasks
[tasks.check]
description = "Runs rustfmt and clippy checks without applying any fix"
dependencies = ["check-clippy", "check-rustfmt"]

[tasks.check-rustfmt]
description = "Runs rustfmt checks without applying any fix"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.check-clippy]
description = "Runs clippy checks without applying any fix"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--all-targets", "--", "--no-deps", "-Dwarnings"]

[tasks.fix]
description = "Runs rustfmt and clippy checks and applies fixes"
dependencies = ["wit", "fix-clippy", "fix-rustfmt"]

[tasks.fix-rustfmt]
description = "Runs rustfmt checks and applies fixes"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all"]

[tasks.fix-clippy]
description = "Runs clippy checks and applies fixes"
install_crate = "clippy"
command = "cargo"
args = [
    "clippy",
    "--fix",
    "--allow-dirty",
    "--allow-staged",
    "--",
    "--no-deps",
    "-Dwarnings",
]

[tasks.set-version]
description = "Sets the version in all Cargo.toml files to the value of the VERSION environment variable"
condition = { env_set = ["VERSION"] }
script = '''
grep -rl --include 'Cargo.toml' '0\.0\.0' | xargs sed -i "s/0\.0\.0/${VERSION}/g"
'''

[tasks.set-version.mac]
condition = { env_set = ["VERSION"] }
script = '''
grep -rl --include '.*Cargo\.toml' '0\.0\.0' | xargs sed -i "" "s/0\.0\.0/${VERSION}/g"
'''

[tasks.set-version.windows]
script_runner = "powershell"
script_extension = "ps1"
condition = { env_set = ["VERSION"] }
script = '''
$cargoFiles = Get-ChildItem . Cargo.toml -rec
foreach ($file in $cargoFiles)
{
    (Get-Content $file.PSPath) |
    Foreach-Object { $_ -replace "0.0.0", $Env:VERSION } |
    Set-Content $file.PSPath
}
'''
